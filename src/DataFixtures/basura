private UserPasswordInterface $userPasswordEncoder

public function __construct(UserPasswordInterface $userPasswordEncoder){
    $this->userPasswordEncoder = $userPasswordEncoder
}






///////////////////////////////////////////////////



security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check # api_login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
            # guard:
            #     authenticators:
            #         - lexik_jwt_authentication.jwt_token_authenticator

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/crypto/device/read, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

# when@test:
#     security:
#         password_hashers:
#             # By default, password hashers are resource intensive and take time. This is
#             # important to generate secure password hashes. In tests however, secure hashes
#             # are not important, waste resources and increase test times. The following
#             # reduces the work factor to the lowest possible values.
#             Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                 algorithm: auto
#                 cost: 4 # Lowest possible value for bcrypt
#                 time_cost: 3 # Lowest possible value for argon
#                 memory_cost: 10 # Lowest possible value for argon
////////////////////////////////////////////////////////////////////////////
/**
     * @deprecated since Symfony 5.3, use getUserIdentifier instead
     */
    public function getUsername(): string
    {
        return (string) $this->email;
    }
        /////////////////////////////////////////////////////////
         # guard:
            #     authenticators:
            #         - lexik_jwt_authentication.jwt_token_authenticator
//////////////////////////////////////////////////////////////////////////
security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check # api_login_check
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
       #     jwt: ~
             guard:
                 authenticators:
                     - lexik_jwt_authentication.jwt_token_authenticator

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/crypto/device/read, roles: PUBLIC_ACCESS }
        - { path: ^/api/crypto/read, roles: PUBLIC_ACCESS }
        - { path: ^/api/device/read, roles: PUBLIC_ACCESS }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/b,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

# when@test:
#     security:
#         password_hashers:
#             # By default, password hashers are resource intensive and take time. This is
#             # important to generate secure password hashes. In tests however, secure hashes
#             # are not important, waste resources and increase test times. The following
#             # reduces the work factor to the lowest possible values.
#             Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                 algorithm: auto
#                 cost: 4 # Lowest possible value for bcrypt
#                 time_cost: 3 # Lowest possible value for argon
#                 memory_cost: 10 # Lowest possible value for argon
//////////////////////////////////////////////////////
  $content = json_decode($request->getContent(),true);
        $user = new User();
        if(isset($content['name'])){
            $user->setName($content[('name')]);
        }
        if(isset($content['username'])){
            $user->setUsername($content[('username')]);
        }
        if(isset($content['email'])){
            $user->setEmail($content[('email')]);
        }
        if(isset($content['password'])){
            $user->setPassword($content['password']);
        }
        
       
        return new JsonResponse([
            'data' => $this->userRepository->add($user),
             'content' => $content,
        ]);
        /////////////////////////////////////////////////////////
         public function createAction(Request $request){
        $crypto = $this->getDoctrine()->getRepository(Crypto::class);
        $devices = $this->getDoctrine()->getRepository(Device::class);

         $content = json_decode($request->getContent(), true);
         $cryptoDevice = new CryptoDevice();
         if (isset($crypto)) {
             $crypto->getId($crypto);
         }
         if (isset($device)) {
             $device->getId($device);
         }
         if (isset($content['price'])) {
             $cryptoDevice->setBenefits($content[('benefits')]);
         }
         return new JsonResponse([
            'data' => $this->cryptoDeviceRepository->add($cryptoDevice),
             'content' => $content,
        ]);
     }